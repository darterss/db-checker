/*
// –≤—Ä–µ–º–µ–Ω–Ω–æ, —É–¥–∞–ª–∏—Ç—å
async checkProxy() {
    try {
        const response = await this.axiosInstance.get('http://api.ipify.org?format=text');
        const proxyIP = response.data;
        logger.info(`üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∫—Å–∏ –¥–ª—è ${this.phpMyAdminUrl.split(':')[0]}: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è IP ${proxyIP}`);
        return response;
    } catch (error) {
        logger.warn(`‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–æ–≤–µ—Ä–∏—Ç—å IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${error.message}`);
    }
}


// –≤—Ä–µ–º–µ–Ω–Ω–æ, —É–¥–∞–ª–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫–∞, —á—Ç–æ –∑–∞–ø—Ä–æ—Å –∏–¥—ë —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
if (await this.checkProxy().then(res=>res.data.startsWith(this.proxy.split(':')[0]))) {
    logger.info(`‚úÖ –ü—Ä–æ–∫—Å–∏ –∞–∫—Ç–∏–≤–Ω–æ (${this.proxy})`);
} else {
    logger.warn(`‚ö†Ô∏è –ü—Ä–æ–∫—Å–∏ –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –≤–æ–∑–º–æ–∂–µ–Ω –ø—Ä—è–º–æ–π –∑–∞–ø—Ä–æ—Å!`);
}*/
