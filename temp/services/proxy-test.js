// curl --proxy http://modeler_lTfZBG:EcYlYXSFYFeOxxx@45.86.163.132:18997 --proxy-insecure https://example.com

const axios = require('axios');
const { HttpsProxyAgent } = require('https-proxy-agent');

// –ü—Ä–æ–∫—Å–∏ –¥–∞–Ω–Ω—ã–µ
const proxyHost = '45.86.163.132';
const proxyPort = '18997';
const proxyUser = 'modeler_lTfZBG';
const proxyPass = 'EcYlYXSFYFeO';

const targetUrl = 'http://api.ipify.org?format=json';

// –§–æ—Ä–º–∏—Ä—É–µ–º –ø—Ä–æ–∫—Å–∏-URL
const proxyUrl = `http://${proxyUser}:${proxyPass}@${proxyHost}:${proxyPort}`;


// –ü—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç
const httpsAgent = new HttpsProxyAgent(proxyUrl, { // for https (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –ø—Ä–∏ http)
    rejectUnauthorized: false // –û—Ç–∫–ª—é—á–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É SSL –¥–ª—è –ø—Ä–æ–∫—Å–∏
});


// –°–æ–∑–¥–∞—ë–º axios –∏–Ω—Å—Ç–∞–Ω—Å —Å –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ–º –ø—Ä–æ–∫—Å–∏
const axiosInstance = axios.create({
    validateStatus: () => true, // –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –æ—Ç–≤–µ—Ç–∞
    proxy: { // for http –Ω—É–∂–Ω–æ —É–±—Ä–∞—Ç—å –ø—Ä–∏ https
        host: proxyHost,
        port: proxyPort,
        auth: {
            username: proxyUser,
            password: proxyPass
        }
    },
    httpsAgent,    // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø—Ä–æ–∫—Å–∏-–∞–≥–µ–Ω—Ç
    timeout: 5000,
});

// –ó–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏
async function testQuery() {
    try {
        console.log('üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏...');
        const response = await axiosInstance.get(targetUrl);
        console.log(`‚úÖ –£—Å–ø–µ—à–Ω—ã–π –∑–∞–ø—Ä–æ—Å: ${response.status}`);
        console.log(`‚úÖ –í–∞—à IP —á–µ—Ä–µ–∑ –ø—Ä–æ–∫—Å–∏: ${response.data.ip}`);
    } catch (error) {
        if (error.response) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –æ—Ç–≤–µ—Ç–∞: ${error.response.status} - ${error.response.statusText}`);
        } else if (error.request) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: –°–µ—Ä–≤–µ—Ä –Ω–µ –æ—Ç–≤–µ—Ç–∏–ª.`);
        } else {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: ${error.message}`);
        }
    }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testQuery();
